{
  
    
        "post0": {
            "title": "Airline Customer Satisfaction Capstone",
            "content": "In this notebook, I will: . Explain why I am working on this project | Explain why this project can benefit airlines | Load and clean the dataset | . . . Notebook Contents (To complete) . Notebook Contents . / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | / / / // // / / / / | . . Introduction to the project . What problems do an airline face? . 1: There are 5000 airlines currently operating. This means relative to other industries there has been little consolidation so competition for passangers is fierce. 2: Flyers have significant choice on which airline to fly with. 3: COVID restrictions and labour shortages have made operating airlines even more challenging. . Why do airlines need to know about customer satisfaction? . 1: There is limited capital to invest. 2: Airlines want to know what to invest in with regards to retaining existing customers whilst attracting new ones. 3: Airlines want to know which customers to focus on. . What does this project aim to do? . Whether it&#39;s deciding on what refreshments to offer or how much to invest in the online booking process, this project mimicks the type of analysis a data scientist would conduct to answer these types of questions. Ultimately, the aim is to enable data driven decison making to cut costs and increase revenues. . Who would make use of this project? . If I was to build out this project from an MVP to a fully fledged software, it would be used by business stakeholders at airlines to input a data file full of satisfaction ratings from customers and would export: . What to focus on in detail | What not to focus on in detail | . These insights would be communicated to senior stakeholders who would be able to make better data driven decisons. . Where is the data from? . This data is sourced from John.D on Kaggle: https://www.kaggle.com/datasets/johndddddd/customer-satisfaction. . The data is reportadley from an airline survery, though the exact source is not shared. . The data was extremely easy to acquire since it was on an easy to use website (Kaggle) and was a simple one click download. I wouldn&#39;t require any data acquisiton adjustments. . This means the data suffers the general disadvantages of survery data: . 1: Valuable data is missing from individuals who did not fill in the survery which could contradict our findings. . 2: The data provided is what individuals believe their satisfaction to be is, but this may not represent their true satisfaction. . TODO Can you trace down the original source of the data? Kaggle is not a source, its a repository. Make sure to expand the above into proper paragraphs. . RES Other users have also looked into this. The exact source of the data is unknown. . TODO Try to answer as many of the below questions as possible in this section. . What is the goal of your project? Summarize it in one or two sentences. . RES I think this is now done? . What potential business or societal value will your project add? If you built out your project from a minimum-viable product (MVP) to a fully realized application or service, who would use it and what would the applications be? . RES I think this is now done? . What actions or next steps will your project enable once it&#8217;s complete? . RES I think this I answered this in the above questions? . Have others tried to tackle this problem as well? What is the existing &quot;state of the art&quot; for tackling this type of problem and how does your project fit into the more broader approaches? . RES From my research it&#39;s all done in house using general analytics software. Example: https://www.qualtrics.com/uk/customers/jetblue/. This means that my project doesn&#39;t actually have any impact since airlines already have their own solutions (which I&#39;m sure is better than mine). I don&#39;t think I should say this right? . Where is your data from? How was it acquired? Is it trustworthy? Is there anywhere it may be lacking? . RES Nobody knows where the original source is, the author on Kaggle never provided it and has not responded to questions about it. Should I add this info? . Does the data cover everything you need to answer your research question? Is there any data you wish you had to further your research? . RES Obviously having more data and more columns of ratings/airline type (short haul, long haul), airline price (Cheap, expensive) would be useful but nothing specific. Shoudl I still say this? . What is the currency of your data, (i.e. is it a snapshot, or continually being updated - daily, weekly, monthly, yearly)? Could you gather more data from the same source or similar sources to further train your model or test &amp; validate against? . RES As mentioned earlier I don&#39;t know the aource and the data is stagnant. This doesn&#39;t sound very good, should I reitterate this? . Have you considered supplementary data sources which might add to tackling your problem, (e.g. economic indicators, weather, demographics, industry benchmarks, market research, etc.)? How would these fit in if you had time to incorporate them? . RES Since I don&#39;t have a time aspect to the data I wouldn&#39;t be able to match it to other datasets which is a shame. Should I still say this? . What quality issues did you uncover in your data? Did you have time to address all these? If you had advice to give back to the team responsible for data collection and management, what would it be? . RES Do I answer this at the end of the capstone? I would probablby find more issues with the data as time goes on? Or should I just answer it at the very beginning? . Were there any considerable challenges in either data acquisition (either finding data or scraping it) for your project? Why was this the case? What would you do differently next time, knowing what you know now? #RES I think I&#39;ve done this now? . . Importing libraries . These are required for me to load the dataset and do some fundamental analysis on it. . import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline # Filter warnings import warnings warnings.filterwarnings(&#39;ignore&#39;) #TODO Nicer to import as you go. Only take your basic libraries now, then leave the scalers and models for the next notebook. You don&#39;t need them here #DONE #QUE What does %matplotlib inline actually do? . . Loading and understanding the dataset . In this section I will be: . reading the .csv file so I can load it into this notebook | understanding what each column is showing | . os.getcwd() df = pd.read_excel(&quot;../data/satisfaction_2015.xlsx&quot;) #TODO: The data file doesn&#39;t seem to live in your notebook folder nor in your data folder. You should move it to the data folder and refer to it by &#39;../data/satisfaction_2015.xlsx&#39;. I had to manually download it from Kaggle and put it on my desktop for it to run #DONE . #DONE . df.head(2) . id satisfaction_v2 Gender Customer Type Age Type of Travel Class Flight Distance Inflight wifi service Departure/Arrival time convenient ... Seat comfort Inflight entertainment On-board service Leg room service Baggage handling Checkin service Inflight service Cleanliness Departure Delay in Minutes Arrival Delay in Minutes . 0 117135 | satisfied | Male | disloyal Customer | 56 | Personal Travel | Eco | 369 | 0 | 2 | ... | 3 | 3 | 1 | 5 | 3 | 3 | 4 | 3 | 0 | 0.0 | . 1 72091 | satisfied | Male | disloyal Customer | 49 | Personal Travel | Eco | 2486 | 0 | 2 | ... | 3 | 2 | 1 | 1 | 4 | 4 | 3 | 2 | 0 | 0.0 | . 2 rows × 24 columns . df.shape # TODO Comment. Is this a good amount for the intended analysis? # Done (but this is in the summary of this section, is that ok?) . (129880, 24) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 129880 entries, 0 to 129879 Data columns (total 24 columns): # Column Non-Null Count Dtype -- -- 0 id 129880 non-null int64 1 satisfaction_v2 129880 non-null object 2 Gender 129880 non-null object 3 Customer Type 129880 non-null object 4 Age 129880 non-null int64 5 Type of Travel 129880 non-null object 6 Class 129880 non-null object 7 Flight Distance 129880 non-null int64 8 Inflight wifi service 129880 non-null int64 9 Departure/Arrival time convenient 129880 non-null int64 10 Ease of Online booking 129880 non-null int64 11 Gate location 129880 non-null int64 12 Food and drink 129880 non-null int64 13 Online boarding 129880 non-null int64 14 Seat comfort 129880 non-null int64 15 Inflight entertainment 129880 non-null int64 16 On-board service 129880 non-null int64 17 Leg room service 129880 non-null int64 18 Baggage handling 129880 non-null int64 19 Checkin service 129880 non-null int64 20 Inflight service 129880 non-null int64 21 Cleanliness 129880 non-null int64 22 Departure Delay in Minutes 129880 non-null int64 23 Arrival Delay in Minutes 129487 non-null float64 dtypes: float64(1), int64(18), object(5) memory usage: 23.8+ MB . print(&quot;-&quot;) print(f&quot;The unique values for &#39;id&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;id&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;satisfaction_v2&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;satisfaction_v2&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Gender&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Gender&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Customer Type &#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Customer Type&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Age &#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Age&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Type of Travel&#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Type of Travel&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Class&#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Class&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Flight Distance&#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Flight Distance&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Inflight wifi&#39; service&#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Inflight wifi service&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Departure/Arrival&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Departure/Arrival time convenient&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Ease of Online booking&#39;are:&quot;) print(&quot; n&quot;) print(df[&#39;Ease of Online booking&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Gate location&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Gate location&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Food and drink&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Food and drink&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Online boarding&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Online boarding&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Seat comfort&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Seat comfort&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Inflight entertainment&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Inflight entertainment&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;On-board service&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;On-board service&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Leg room service&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Leg room service&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Baggage handling&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Baggage handling&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Checkin service&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Checkin service&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Inflight service&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Inflight service&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Cleanliness&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Cleanliness&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Departure Delay in Minutes&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Departure Delay in Minutes&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;The unique values for &#39;Arrival Delay in Minutes&#39; are:&quot;) print(&quot; n&quot;) print(df[&#39;Arrival Delay in Minutes&#39;].value_counts()) print(&quot;-&quot;) . - The unique values for &#39;id&#39; are: 117135 1 46894 1 25951 1 70649 1 7867 1 .. 122500 1 75752 1 111660 1 41558 1 10198 1 Name: id, Length: 129880, dtype: int64 - The unique values for &#39;satisfaction_v2&#39; are: neutral or dissatisfied 73452 satisfied 56428 Name: satisfaction_v2, dtype: int64 - The unique values for &#39;Gender&#39; are: Female 65899 Male 63981 Name: Gender, dtype: int64 - The unique values for &#39;Customer Type &#39;are: Loyal Customer 106100 disloyal Customer 23780 Name: Customer Type, dtype: int64 - The unique values for &#39;Age &#39;are: 39 3692 25 3511 40 3209 44 3104 41 3089 ... 74 61 76 60 79 52 78 44 85 25 Name: Age, Length: 75, dtype: int64 - The unique values for &#39;Type of Travel&#39;are: Business travel 89693 Personal Travel 40187 Name: Type of Travel, dtype: int64 - The unique values for &#39;Class&#39;are: Business 62160 Eco 58309 Eco Plus 9411 Name: Class, dtype: int64 - The unique values for &#39;Flight Distance&#39;are: 337 841 594 505 404 480 862 473 2475 470 ... 1441 1 1094 1 1316 1 1279 1 3564 1 Name: Flight Distance, Length: 3821, dtype: int64 - The unique values for &#39;Inflight wifi&#39; service&#39;are: 2 32320 3 32185 4 24775 1 22328 5 14356 0 3916 Name: Inflight wifi service, dtype: int64 - The unique values for &#39;Departure/Arrival&#39; are: 4 31880 5 27998 3 22378 2 21534 1 19409 0 6681 Name: Departure/Arrival time convenient, dtype: int64 - The unique values for &#39;Ease of Online booking&#39;are: 3 30393 2 30051 4 24444 1 21886 5 17424 0 5682 Name: Ease of Online booking, dtype: int64 - The unique values for &#39;Gate location&#39; are: 3 35717 4 30466 2 24296 1 21991 5 17409 0 1 Name: Gate location, dtype: int64 - The unique values for &#39;Food and drink&#39; are: 4 30563 5 27957 3 27794 2 27383 1 16051 0 132 Name: Food and drink, dtype: int64 - The unique values for &#39;Online boarding&#39; are: 4 38468 3 27117 5 26020 2 21934 1 13261 0 3080 Name: Online boarding, dtype: int64 - The unique values for &#39;Seat comfort&#39; are: 4 39756 5 33158 3 23328 2 18529 1 15108 0 1 Name: Seat comfort, dtype: int64 - The unique values for &#39;Inflight entertainment&#39; are: 4 36791 5 31544 3 23884 2 21968 1 15675 0 18 Name: Inflight entertainment, dtype: int64 - The unique values for &#39;On-board service&#39; are: 4 38703 5 29492 3 28542 2 18351 1 14787 0 5 Name: On-board service, dtype: int64 - The unique values for &#39;Leg room service&#39; are: 4 35886 5 30905 3 25056 2 24540 1 12895 0 598 Name: Leg room service, dtype: int64 - The unique values for &#39;Baggage handling&#39; are: 4 46761 5 33878 3 25851 2 14362 1 9028 Name: Baggage handling, dtype: int64 - The unique values for &#39;Checkin service&#39; are: 4 36333 3 35453 5 25883 1 16108 2 16102 0 1 Name: Checkin service, dtype: int64 - The unique values for &#39;Inflight service&#39; are: 4 47323 5 34066 3 25316 2 14308 1 8862 0 5 Name: Inflight service, dtype: int64 - The unique values for &#39;Cleanliness&#39; are: 4 33969 3 30639 5 28416 2 20113 1 16729 0 14 Name: Cleanliness, dtype: int64 - The unique values for &#39;Departure Delay in Minutes&#39; are: 0 73356 1 3682 2 2855 3 2535 4 2309 ... 314 1 1592 1 566 1 921 1 320 1 Name: Departure Delay in Minutes, Length: 466, dtype: int64 - The unique values for &#39;Arrival Delay in Minutes&#39; are: 0.0 72753 1.0 2747 2.0 2587 3.0 2442 4.0 2373 ... 443.0 1 418.0 1 608.0 1 429.0 1 500.0 1 Name: Arrival Delay in Minutes, Length: 472, dtype: int64 - . Now I can create a data dictionary. . Data Description v1 . Categorical Columns: . satisfaction_v2 --&gt; This is our target feature. It is whether or not a customer was satisfied | Gender --&gt; This shows whether or not the customer was male or female | Type of Travel --&gt; This shows whether or not the customer travelled for business or personal travel | Class --&gt; This is the type of class the customer flew in (Eco, Eco Plus, Business) | Customer Type --&gt; This is whether or not the customer was loyal or disloyal | . Numerical Column With No Range Limit: . id --&gt; This is the unique id of each customer | Age --&gt; This is the age of the customer | Flight Distance --&gt; This is the flight distance in miles | Gate location --&gt; This is the satisfaction rating of gate location | Departure Delay in Minutes --&gt; This is the numnber of minutes the flight was delayed at departure | Arrival Delay in Minutes --&gt; This is the numnber of minutes the flight was delayed at arrival to destination | . Numerical Column Rating 0 - 5: . Inflight wifi --&gt; This is the satisfaction rating of the inflight wifi | Departure/Arrival time --&gt; This is the satisfaction rating of the inflight wifi | Ease of Online booking --&gt; This is the satisfaction rating of the online booking process | Food and drink --&gt; This is the satisfaction rating of the food and drink offered in flight | Online boarding --&gt; This is the satisfaction rating of the online boarding | Seat comfort --&gt; This is the satisfaction rating of the inflight seats | Inflight entertainment --&gt; This is the satisfaction rating of the inflight entertainment | On-board service --&gt; This is the satisfaction rating of onboard service | Baggage handling --&gt; This is the satisfaction rating of baggage handling | Checkin service --&gt; This is the satisfaction rating of the checkin service | Leg room service --&gt; This is the satisfaction rating of inflight leg room | Inflight service --&gt; This is the satisfaction rating of the inflight service | Cleanliness --&gt; This is the satisfaction rating of how clean the aeroplane | . Summary of Loading and understanding the dataset section . In this section I: . 1: loaded in the dataset . found the dataset had 24 columns and ~130,000 rows. Having a larger number of rows would make our models more accurate but 130,000 rows is satisfactory for this initial project | . 2: looked at thew data types of each column . they all seem to be correct except for &#39;Arrival Delay in Minutes&#39; which could be changed from float to int. I will look into this further in the next section. | . 3: looked at the contents of each column . this gives me an fundamental understanding of what each column is showing but I will need to explore further in the EDA notebook | . 4: created an initial data dictionary . you can refer to this dictionary if you want clarification on what each column is showing for now. We will be creating a new data dictionary once we rename columns and potneitallty drop columns. | . . Removing or fixing missing/null values . In this section I will be: . dealing with null values or missing rows | . # Done . Removing Missing/Null Values . # Done . df_nulls = df.isna().any() df_nulls.value_counts() . False 23 True 1 dtype: int64 . df.isnull().sum()/len(df) . id 0.000000 satisfaction_v2 0.000000 Gender 0.000000 Customer Type 0.000000 Age 0.000000 Type of Travel 0.000000 Class 0.000000 Flight Distance 0.000000 Inflight wifi service 0.000000 Departure/Arrival time convenient 0.000000 Ease of Online booking 0.000000 Gate location 0.000000 Food and drink 0.000000 Online boarding 0.000000 Seat comfort 0.000000 Inflight entertainment 0.000000 On-board service 0.000000 Leg room service 0.000000 Baggage handling 0.000000 Checkin service 0.000000 Inflight service 0.000000 Cleanliness 0.000000 Departure Delay in Minutes 0.000000 Arrival Delay in Minutes 0.003026 dtype: float64 . After checking if any columns had null values, I looked at the normalised proportions of missing values by column as shown above. I see that only &#39;Arrival Delay in Minutes&#39; contains a small % (less than 1%) of null values. We can look at the rows in question as shown below: . TODO Describe and Discuss everything you output: &quot;The above shows the normalised proportions of missing values by column. We can see that only Arrival Delay contains missing values, in about X% of its rows. We will see in the next notebook, .....&quot; . TODO suffers from multicollinearity with what other column? What is multicollinearity and why does it mean that we should drop the column? . df[df[&#39;Arrival Delay in Minutes&#39;].isnull()] . id satisfaction_v2 Gender Customer Type Age Type of Travel Class Flight Distance Inflight wifi service Departure/Arrival time convenient ... Seat comfort Inflight entertainment On-board service Leg room service Baggage handling Checkin service Inflight service Cleanliness Departure Delay in Minutes Arrival Delay in Minutes . 194 44820 | satisfied | Male | disloyal Customer | 49 | Personal Travel | Eco | 491 | 5 | 4 | ... | 3 | 3 | 1 | 4 | 3 | 3 | 4 | 3 | 0 | NaN | . 197 46936 | satisfied | Female | disloyal Customer | 63 | Personal Travel | Eco | 776 | 5 | 5 | ... | 3 | 3 | 5 | 2 | 5 | 3 | 5 | 3 | 7 | NaN | . 351 61021 | satisfied | Female | Loyal Customer | 21 | Personal Travel | Eco | 3365 | 0 | 2 | ... | 5 | 5 | 4 | 1 | 4 | 2 | 3 | 5 | 20 | NaN | . 452 40480 | satisfied | Male | Loyal Customer | 28 | Personal Travel | Eco | 222 | 0 | 3 | ... | 4 | 2 | 1 | 1 | 3 | 4 | 3 | 2 | 0 | NaN | . 916 19597 | satisfied | Male | Loyal Customer | 28 | Personal Travel | Eco | 173 | 0 | 5 | ... | 5 | 5 | 4 | 4 | 5 | 3 | 4 | 5 | 24 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 127457 125075 | satisfied | Female | Loyal Customer | 41 | Business travel | Business | 3758 | 1 | 1 | ... | 5 | 5 | 5 | 5 | 5 | 4 | 5 | 5 | 23 | NaN | . 127658 75644 | satisfied | Female | Loyal Customer | 60 | Business travel | Business | 3041 | 3 | 3 | ... | 4 | 5 | 5 | 5 | 5 | 4 | 5 | 3 | 0 | NaN | . 127945 40434 | satisfied | Male | Loyal Customer | 44 | Business travel | Business | 3383 | 2 | 2 | ... | 4 | 5 | 5 | 5 | 5 | 5 | 5 | 4 | 70 | NaN | . 128337 120101 | satisfied | Male | Loyal Customer | 39 | Business travel | Business | 1576 | 4 | 4 | ... | 5 | 5 | 5 | 5 | 5 | 3 | 5 | 5 | 0 | NaN | . 128916 45676 | satisfied | Female | Loyal Customer | 45 | Business travel | Eco | 826 | 5 | 1 | ... | 2 | 5 | 5 | 5 | 5 | 1 | 5 | 5 | 100 | NaN | . 393 rows × 24 columns . We will see in the EDA notebook that the &#39;Arrival Delay in Minutes&#39; and &#39;Departure Delay in Minutes&#39; are heavily correlated. This is referred to as &#39;multicollinearity&#39;, where one columns correlates with another column that is ••not•• the target column. This is an issue because: . It becomes harder to interpret your coefficients | The model will struggle to identify independant variables that are statistically significant, which reduces the model&#39;s power | . As a result, we will look to remove &#39;Arrival Delay in Minutes&#39; in the EDA notebook, but for now we will leave the column as is. . We could also look at the median ratio between both the &#39;&#39;Arrival Delay in Minutes&#39; and &#39;Departure Delay in Minutes&#39;, and fill the null cells by using the following &#39;formula&#39;: . arrival delay missing values = departure delay / median ratio between both the &#39;&#39;Arrival Delay in Minutes&#39; and &#39;Departure Delay in Minutes&#39; . But as mentioned the column will be removed in a later notebook. . Later in this notebook I will deep dive into the satisfaction ratings and identify if the scale is from &#39;0-5&#39; or &#39;1-5&#39;. If the latter is true then I will need to address all ratings at 0. This information is not provided by the Kaggle author and other users were also unable to find this answer. . Summary of &#39; Removing or fixing missing/null values&#39; section . In this section I: . 1: found a small % of null values in the &#39;Arrival Delay in Minutes&#39; column, but due to multicollinearity I am leaving the column as is for now . #Done . . Removing duplicate rows &amp; analysing data types . In this section I will be: . removing any duplicate rows | analysing the data types of each column and making appropriate adjustments if required | . Removing Duplicated Values . df.duplicated().sum() . 0 . Above we see that there are 0 duplicated rows in our dataframe. This means there is nothing else to clean or fix here. . # Done . Analysing Column Data Types . We need to understand what each column is showing. We can look at the datatype of each column: . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 129880 entries, 0 to 129879 Data columns (total 24 columns): # Column Non-Null Count Dtype -- -- 0 id 129880 non-null int64 1 satisfaction_v2 129880 non-null object 2 Gender 129880 non-null object 3 Customer Type 129880 non-null object 4 Age 129880 non-null int64 5 Type of Travel 129880 non-null object 6 Class 129880 non-null object 7 Flight Distance 129880 non-null int64 8 Inflight wifi service 129880 non-null int64 9 Departure/Arrival time convenient 129880 non-null int64 10 Ease of Online booking 129880 non-null int64 11 Gate location 129880 non-null int64 12 Food and drink 129880 non-null int64 13 Online boarding 129880 non-null int64 14 Seat comfort 129880 non-null int64 15 Inflight entertainment 129880 non-null int64 16 On-board service 129880 non-null int64 17 Leg room service 129880 non-null int64 18 Baggage handling 129880 non-null int64 19 Checkin service 129880 non-null int64 20 Inflight service 129880 non-null int64 21 Cleanliness 129880 non-null int64 22 Departure Delay in Minutes 129880 non-null int64 23 Arrival Delay in Minutes 129487 non-null float64 dtypes: float64(1), int64(18), object(5) memory usage: 23.8+ MB . Data Type Analysis . The majority of data types are &#39;int&#39; which makes sense since the majority of columns are numerical. The &#39;Arrival Delay in Minutes&#39; is an anomoly though, because it&#39;s in a float data type. Before changing this column to an &#39;int&#39; data type I will need to confirm if every row contains an integer. . The remaining columns are all categorical columns with text. In a later notebook we will convert these columns to binary columns; which would be numerical. But for now, we should change the data type of these categorical colums to &#39;category&#39;. . df[&#39;satisfaction_v2&#39;] = df[&#39;satisfaction_v2&#39;].astype(&#39;category&#39;) df[&#39;Gender&#39;] = df[&#39;Gender&#39;].astype(&#39;category&#39;) df[&#39;Customer Type&#39;] = df[&#39;Customer Type&#39;].astype(&#39;category&#39;) df[&#39;Type of Travel&#39;] = df[&#39;Type of Travel&#39;].astype(&#39;category&#39;) df[&#39;Class&#39;] = df[&#39;Class&#39;].astype(&#39;category&#39;) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 129880 entries, 0 to 129879 Data columns (total 24 columns): # Column Non-Null Count Dtype -- -- 0 id 129880 non-null int64 1 satisfaction_v2 129880 non-null category 2 Gender 129880 non-null category 3 Customer Type 129880 non-null category 4 Age 129880 non-null int64 5 Type of Travel 129880 non-null category 6 Class 129880 non-null category 7 Flight Distance 129880 non-null int64 8 Inflight wifi service 129880 non-null int64 9 Departure/Arrival time convenient 129880 non-null int64 10 Ease of Online booking 129880 non-null int64 11 Gate location 129880 non-null int64 12 Food and drink 129880 non-null int64 13 Online boarding 129880 non-null int64 14 Seat comfort 129880 non-null int64 15 Inflight entertainment 129880 non-null int64 16 On-board service 129880 non-null int64 17 Leg room service 129880 non-null int64 18 Baggage handling 129880 non-null int64 19 Checkin service 129880 non-null int64 20 Inflight service 129880 non-null int64 21 Cleanliness 129880 non-null int64 22 Departure Delay in Minutes 129880 non-null int64 23 Arrival Delay in Minutes 129487 non-null float64 dtypes: category(5), float64(1), int64(18) memory usage: 19.4 MB . #DONE . df[&#39;Arrival Delay in Minutes&#39;].sum() . 1954105.0 . We can see that the sum of &#39;Arrival Delay in Minutes&#39; is a whole number, which means it can be stored as an int data type. . TODO Just because the sum adds up to a whole number doesn&#39;t mean all entries are integers. What other way is there for you to check? . RES I completely see this now. Though I don&#39;t know how else I would test this. I tried googling but a lot of the answers were just testing the data type. . QUE Because I left the null values as is, I&#39;m not able ot change the data type of the column. How should i move forward regarding this. . df[&#39;Arrival Delay in Minutes&#39;] = df[&#39;Arrival Delay in Minutes&#39;].astype(int) . IntCastingNaNError Traceback (most recent call last) Input In [101], in &lt;cell line: 2&gt;() 1 # Below I am changing the the &#39;Arrival Delay in Minutes&#39; column to the int datatype -&gt; 2 df[&#39;Arrival Delay in Minutes&#39;] = df[&#39;Arrival Delay in Minutes&#39;].astype(int) File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py:5912, in NDFrame.astype(self, dtype, copy, errors) 5905 results = [ 5906 self.iloc[:, i].astype(dtype, copy=copy) 5907 for i in range(len(self.columns)) 5908 ] 5910 else: 5911 # else, only a single dtype is given -&gt; 5912 new_data = self._mgr.astype(dtype=dtype, copy=copy, errors=errors) 5913 return self._constructor(new_data).__finalize__(self, method=&#34;astype&#34;) 5915 # GH 33113: handle empty frame or series File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/managers.py:419, in BaseBlockManager.astype(self, dtype, copy, errors) 418 def astype(self: T, dtype, copy: bool = False, errors: str = &#34;raise&#34;) -&gt; T: --&gt; 419 return self.apply(&#34;astype&#34;, dtype=dtype, copy=copy, errors=errors) File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/managers.py:304, in BaseBlockManager.apply(self, f, align_keys, ignore_failures, **kwargs) 302 applied = b.apply(f, **kwargs) 303 else: --&gt; 304 applied = getattr(b, f)(**kwargs) 305 except (TypeError, NotImplementedError): 306 if not ignore_failures: File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/blocks.py:580, in Block.astype(self, dtype, copy, errors) 562 &#34;&#34;&#34; 563 Coerce to the new dtype. 564 (...) 576 Block 577 &#34;&#34;&#34; 578 values = self.values --&gt; 580 new_values = astype_array_safe(values, dtype, copy=copy, errors=errors) 582 new_values = maybe_coerce_values(new_values) 583 newb = self.make_block(new_values) File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/dtypes/cast.py:1292, in astype_array_safe(values, dtype, copy, errors) 1289 dtype = dtype.numpy_dtype 1291 try: -&gt; 1292 new_values = astype_array(values, dtype, copy=copy) 1293 except (ValueError, TypeError): 1294 # e.g. astype_nansafe can fail on object-dtype of strings 1295 # trying to convert to float 1296 if errors == &#34;ignore&#34;: File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/dtypes/cast.py:1237, in astype_array(values, dtype, copy) 1234 values = values.astype(dtype, copy=copy) 1236 else: -&gt; 1237 values = astype_nansafe(values, dtype, copy=copy) 1239 # in pandas we don&#39;t store numpy str dtypes, so convert to object 1240 if isinstance(dtype, np.dtype) and issubclass(values.dtype.type, str): File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/dtypes/cast.py:1148, in astype_nansafe(arr, dtype, copy, skipna) 1145 raise TypeError(f&#34;cannot astype a timedelta from [{arr.dtype}] to [{dtype}]&#34;) 1147 elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer): -&gt; 1148 return astype_float_to_int_nansafe(arr, dtype, copy) 1150 elif is_object_dtype(arr.dtype): 1151 1152 # work around NumPy brokenness, #1987 1153 if np.issubdtype(dtype.type, np.integer): File ~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/dtypes/cast.py:1193, in astype_float_to_int_nansafe(values, dtype, copy) 1189 &#34;&#34;&#34; 1190 astype with a check preventing converting NaN to an meaningless integer value. 1191 &#34;&#34;&#34; 1192 if not np.isfinite(values).all(): -&gt; 1193 raise IntCastingNaNError( 1194 &#34;Cannot convert non-finite values (NA or inf) to integer&#34; 1195 ) 1196 return values.astype(dtype, copy=copy) IntCastingNaNError: Cannot convert non-finite values (NA or inf) to integer . Summary of &#39;Removing duplicate rows &amp; analysing data types&#39; section . In this section I: . 1: found that there were 0 duplicate rows, so there was nothing to remove . 2: looked at thew data types of each column . &#39;Arrival Delay in Minutes&#39; was mistakenly a float, this was changed to &#39;int&#39; | The categorical columns were labelled as an &#39;object&#39;, they were changed to a &#39;category&#39; data type | . . Final data cleaning, updating the data dictionary and exporting the .csv . In this section I will be: . investigating categorical column values and making appropriate adjustments if required | renaming columns appropriately &amp; creating an updated data dictionary | exporting our final dataframe as a .csv that we can use in our next EDA notebook | . # RES I WIll add this to the summary of this section further down? . Investigating Column Values . df.info() . I need to ensure that the categorical columns contain only 2 options. . These options need to be spelt correctly (no typos). Also I need to investigate any column with more than 2 unique options to ensure there are not unusual values or errors in the data. . The columns in question are: . satisfaction_v2 | Gender | Customer Type | Type of Travel | Class | . I will carry out these checks below. . print(&quot;-&quot;) print(f&quot;There are {df[&#39;satisfaction_v2&#39;].nunique()} unique values for &#39;satisfaction_v2&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;satisfaction_v2&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Gender&#39;].nunique()} unique values for &#39;Gender&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Gender&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Customer Type&#39;].nunique()} unique values for &#39;Customer Type&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Customer Type&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Type of Travel&#39;].nunique()} unique values for &#39;Type of Travel&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Type of Travel&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Class&#39;].nunique()} unique values for &#39;Class&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Class&#39;].value_counts()) . After analysing each of the categorical columns we can see that: . 1: There are no spelling errors, but in same cases one option has a capital letter and another doesn&#39;t. This will be fixed. I will make each option start with a capital letter. . For example in &#39;Customer Type&#39; there is one option : &quot;Loyal Customer&quot; and another which is &quot;disloyal Customer&quot; | . 2: In the &#39;satisfaction_v2&#39; column, the second option is &#39;satisfied&#39;. The first option can be simplified to &#39;Dissatisfied&#39; instead of &#39;neutral or dissatisfied&#39; which is unnecessarily long . 3: The &#39;Class&#39; column has 3 unique options, but upon further inspection this makes sense. Some flights offer premmium economy/economy plus. We will investigate this column further in the EDA notebook but for now we can leave the column with 3 options. However, having &#39;Business&#39; and then &#39;Eco&#39; doesn&#39;t flow well, we can change the instances of &#39;Eco&#39; to &#39;Economy&#39; . 4: In general, I can simplify our categorical values. This makes it easier to read and reduces the exported .csv file size. . Please see this cleaning process below: . df[&#39;satisfaction_v2&#39;] = df[&#39;satisfaction_v2&#39;].cat.rename_categories({&#39;neutral or dissatisfied&#39;: &#39;Dissatisfied&#39;, &#39;satisfied&#39;: &#39;Satisfied&#39;}) df[&#39;Customer Type&#39;] = df[&#39;Customer Type&#39;].cat.rename_categories({&#39;Loyal Customer&#39;: &#39;Loyal&#39;, &#39;disloyal Customer&#39;: &#39;Disloyal&#39;}) df[&#39;Type of Travel&#39;] = df[&#39;Type of Travel&#39;].cat.rename_categories({&#39;Business travel&#39;: &#39;Business&#39;, &#39;Personal Travel&#39;: &#39;Personal&#39;}) df[&#39;Class&#39;] = df[&#39;Class&#39;].cat.rename_categories({&#39;Eco&#39;: &#39;Economy&#39;, &#39;Eco Plus&#39;: &#39;Economy Plus&#39;}) . print(&quot;-&quot;) print(f&quot;There are {df[&#39;satisfaction_v2&#39;].nunique()} unique values for &#39;satisfaction_v2&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;satisfaction_v2&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Gender&#39;].nunique()} unique values for &#39;Gender&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Gender&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Customer Type&#39;].nunique()} unique values for &#39;Customer Type&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Customer Type&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Type of Travel&#39;].nunique()} unique values for &#39;Type of Travel&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Type of Travel&#39;].value_counts()) print(&quot;-&quot;) print(f&quot;There are {df[&#39;Class&#39;].nunique()} unique values for &#39;Class&#39;. They are:&quot;) print(&quot; n&quot;) print(df[&#39;Class&#39;].value_counts()) . #DONE . Renaming columns . These column names need to be optimised, so they best describe what they are showing. . I also want underscores between wach string so I can more easily refer to each column when coding. . df.rename(columns = {&#39;satisfaction_v2&#39; : &#39;satisfaction_target&#39;}, inplace=True) df.rename(columns = {&#39;Gender&#39;: &#39;customer_gender&#39;}, inplace=True) df.rename(columns = { &#39;Customer Type&#39; : &#39;customer_loyalty_type&#39;}, inplace=True) df.rename(columns = {&#39;Age&#39;: &#39;customer_age&#39;}, inplace=True) df.rename(columns = {&#39;Type of Travel&#39; : &#39;customer_travel_type&#39;}, inplace=True) df.rename(columns = {&#39;Class&#39; : &#39;customer_class_type&#39;}, inplace=True) df.rename(columns = {&#39;Flight Distance&#39; : &#39;flight_distance&#39;}, inplace=True) df.rename(columns = {&#39;Inflight wifi service&#39; : &#39;flight_wifi_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Departure/Arrival time convenient&#39; : &#39;departure/arrival_time_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Ease of Online booking&#39; : &#39;online_booking_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Gate location&#39; : &#39;gate_location_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Food and drink&#39; : &#39;food/drink_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Online boarding&#39; : &#39;online_boarding_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Seat comfort&#39; : &#39;seat_comfort_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Inflight entertainment&#39; : &#39;inflight_entertainment_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;On-board service&#39; : &#39;onboard_service_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Leg room service&#39; : &#39;leg_room_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Baggage handling&#39; : &#39;baggage_handling_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Checkin service&#39; : &#39;checkin_service_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Inflight service&#39; : &#39;inflight_service_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Cleanliness&#39; : &#39;cleanliness_satisfaction_rating&#39;}, inplace=True) df.rename(columns = {&#39;Departure Delay in Minutes&#39; : &#39;departure_delay_in_minutes&#39;}, inplace=True) df.rename(columns = {&#39;Arrival Delay in Minutes&#39; : &#39;arrival_delay_in_minutes&#39;}, inplace=True) . df.head(2) . id satisfaction_target customer_gender customer_loyalty_type customer_age customer_travel_type customer_class_type flight_distance flight_wifi_satisfaction_rating departure/arrival_time_satisfaction_rating ... seat_comfort_satisfaction_rating inflight_entertainment_satisfaction_rating onboard_service_satisfaction_rating leg_room_satisfaction_rating baggage_handling_satisfaction_rating checkin_service_satisfaction_rating inflight_service_satisfaction_rating cleanliness_satisfaction_rating departure_delay_in_minutes arrival_delay_in_minutes . 0 117135 | satisfied | Male | disloyal Customer | 56 | Personal Travel | Eco | 369 | 0 | 2 | ... | 3 | 3 | 1 | 5 | 3 | 3 | 4 | 3 | 0 | 0.0 | . 1 72091 | satisfied | Male | disloyal Customer | 49 | Personal Travel | Eco | 2486 | 0 | 2 | ... | 3 | 2 | 1 | 1 | 4 | 4 | 3 | 2 | 0 | 0.0 | . 2 rows × 24 columns . Creating an updated data dictionary . Data Description v2 . Categorical Columns: . satisfaction_target --&gt; This is our target feature. It is whether or not a customer was satisfied | customer_gender --&gt; This shows whether or not the customer was male or female | customer_travel_type --&gt; This shows whether or not the customer travelled for business or personal travel | customer_class_type --&gt; This is the type of class the customer flew in (Eco, Eco Plus, Business) | customer_loyalty_type --&gt; This is whether or not the customer was loyal or disloyal | . Numerical Column With No Range Limit: . id --&gt; This is the unique id of each customer | customer_age --&gt; This is the age of the customer | flight_distance --&gt; This is the flight distance in miles | departure_delay_in_minutes --&gt; This is the numnber of minutes the flight was delayed at departure | arrival_delay_in_minutes --&gt; This is the numnber of minutes the flight was delayed at arrival to destination | . Numerical Column Rating 0 - 5: . flight_wifi_satisfaction_rating --&gt; This is the satisfaction rating of the inflight wifi | departure/arrival_time_satisfaction_rating --&gt; This is the satisfaction rating of the inflight wifi | online_booking_satisfaction_rating --&gt; This is the satisfaction rating of the online booking process | food/drink_satisfaction_rating --&gt; This is the satisfaction rating of the food and drink offered in flight | online_booking_satisfaction_rating --&gt; This is the satisfaction rating of the online boarding | seat_comfort_satisfaction_rating --&gt; This is the satisfaction rating of the inflight seats | inflight_service_satisfaction_rating --&gt; This is the satisfaction rating of the inflight entertainment | onboard_service_satisfaction_rating --&gt; This is the satisfaction rating of onboard service | baggage_handling_satisfaction_rating --&gt; This is the satisfaction rating of baggage handling | checkin_service_satisfaction_rating --&gt; This is the satisfaction rating of the checkin service | leg_room_satisfaction_rating --&gt; This is the satisfaction rating of inflight leg room | inflight_service_satisfaction_rating --&gt; This is the satisfaction rating of the inflight service | gate_location_satisfaction_rating --&gt; This is the satisfaction rating of gate location | cleanliness_satisfaction_rating --&gt; This is the satisfaction rating of how clean the aeroplane | . Exporting the final dataframe to a .csv file . df.to_csv(&#39;../data/cleaned_airlines.csv&#39;) . Summary of Loading and understanding the dataset section . In this section I: . investigating categorical column values and making appropriate adjustments if required renaming columns appropriately &amp; creating an updated data dictionary exporting our final dataframe as a .csv that we can use in our next EDA notebook . 1: corrected the values of categorical columns . Values were shortened if possible | All values now begin with a capital letter | . 2: renamed specific colunns . They were all given lower case, appropriate names that made it easier for a first time reader to idenitfy what each showed | . 3: created an updated data dictionary . 4: exported the final data frame to the data folder within my capstone folder as a .csv called &#39;cleaned_airlines&#39; . Notebook Ending Remarks . In this notebook, I have completed some cleaning steps to ensure the data is of its highest quality before processing may begin. This will give the most accurate analysis, and thus more accurate findings and insights. . In the next notebook, I will be exploring my data in more detail by doing some exploratory data analysis. See Notebook 2-EDA. . End of notebook review . Notebook Achievements . In this notebook I: . Loaded the dataset | Created an initial data dictionary | Identified and discussed null values | Changed the data types of colunns | Changed the data types of categorical colunns | Changed the names of specific colunmns | Created a final data dictionary | Exported the final dataframe as a .csv | . . Data Insights and Learnings . I saw that my data has ~130,000 rows and 24 columnns, which is sufficient for this capstone project. Over the course of the notebooks I should be able to identify which columns/features are important for airlines to focus on in relation to customer satisfaction. I also gained an understanding of what each column was showing and have some rough ideas of which columnns are likely to be impactful in relation to models. . . Next Steps . The main aspect of the next EDA notebook is to explore the dataset with more depth, especially with the use of visuals. I will idenitfy trends and outliers which will help me to to identify which colunns are likely to be of significant in regards to models. I may also do a small amount of additonal cleaning (e.g. dropping columns) once I am presented with addititional information. . # Done .",
            "url": "https://ali-idris.github.io/festival2oscars/2022/08/03/Loading-and-Cleaning.html",
            "relUrl": "/2022/08/03/Loading-and-Cleaning.html",
            "date": " • Aug 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Airline Customer Satisfaction Capstone",
            "content": ". import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline import random np.random.seed(123) random.seed(123) from sklearn.model_selection import train_test_split # Filter warnings import warnings warnings.filterwarnings(&#39;ignore&#39;) import os from sklearn.preprocessing import MinMaxScaler from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression from sklearn.neighbors import KNeighborsClassifier from sklearn.tree import DecisionTreeClassifier from sklearn.compose import ColumnTransformer import seaborn as sns #TODO Only import packages you are actually using in this notebook . df = pd.read_csv(&#39;../data/cleaned_airlines.csv&#39;) df.head(2) # TODO Make sure your previous notebook outputs the csv to the data folder, and that here you import it from the data folder. . Unnamed: 0 id satisfaction_target customer_gender customer_loyalty_type customer_age customer_travel_type customer_class_type flight_distance flight_wifi_satisfaction_rating ... seat_comfort_satisfaction_rating inflight_entertainment_satisfaction_rating onboard_service_satisfaction_rating leg_room_n_satisfaction_rating baggage_handling_satisfaction_rating checkin_service_satisfaction_rating inflight_service_satisfaction_rating cleanliness_satisfaction_rating departure_delay_in_minutes arrival_delay_in_minutes . 0 0 | 117135 | satisfied | Male | disloyal Customer | 56 | Personal Travel | Eco | 369 | 0 | ... | 3 | 3 | 1 | 5 | 3 | 3 | 4 | 3 | 0 | 0 | . 1 1 | 72091 | satisfied | Male | disloyal Customer | 49 | Personal Travel | Eco | 2486 | 0 | ... | 3 | 2 | 1 | 1 | 4 | 4 | 3 | 2 | 0 | 0 | . 2 rows × 25 columns . In the process of downloading and importing the data, we have a new index column: &#39;Unnamed: 0&#39;. We can safely remove this column since we already have a built in index. . df = df.drop(&#39;Unnamed: 0&#39;, axis=1) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 129487 entries, 0 to 129486 Data columns (total 24 columns): # Column Non-Null Count Dtype -- -- 0 id 129487 non-null int64 1 satisfaction_target 129487 non-null object 2 customer_gender 129487 non-null object 3 customer_loyalty_type 129487 non-null object 4 customer_age 129487 non-null int64 5 customer_travel_type 129487 non-null object 6 customer_class_type 129487 non-null object 7 flight_distance 129487 non-null int64 8 flight_wifi_satisfaction_rating 129487 non-null int64 9 departure/arrival_time_satisfaction_rating 129487 non-null int64 10 online_booking_satisfaction_rating 129487 non-null int64 11 gate_location_satisfaction_rating 129487 non-null int64 12 food/drink_satisfaction_rating 129487 non-null int64 13 online_boarding_satisfaction_rating 129487 non-null int64 14 seat_comfort_satisfaction_rating 129487 non-null int64 15 inflight_entertainment_satisfaction_rating 129487 non-null int64 16 onboard_service_satisfaction_rating 129487 non-null int64 17 leg_room_n_satisfaction_rating 129487 non-null int64 18 baggage_handling_satisfaction_rating 129487 non-null int64 19 checkin_service_satisfaction_rating 129487 non-null int64 20 inflight_service_satisfaction_rating 129487 non-null int64 21 cleanliness_satisfaction_rating 129487 non-null int64 22 departure_delay_in_minutes 129487 non-null int64 23 arrival_delay_in_minutes 129487 non-null int64 dtypes: int64(19), object(5) memory usage: 23.7+ MB . Plotting Trends . #TODO The first section should be Univariate Analysis, with a subsection for each of your variables (maybe you can combine the satisfaction ratings into one section) # In each subsection, you should plot the distribution of the variable, comment on whether it is normally distributed, comment on whether there are outliers, plot the variable against your y, and use that to comment on whether the variable is likely to be useful in your analysis. Is it correlated to y? Is it linear or non-linear? #TODO After the univariate analysis, you should have a section on multivariate analysis, which is mostly looking for correlations. . plt.subplots(2, 2, figsize = (10, 10)) plt.subplot(2,2,1) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;customer_age&quot;, bins=20).set(title=&#39;customer_age_histogram&#39;) plt.subplot(2,2,2) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;flight_distance&quot;, bins=20).set(title=&#39;flight_distance&#39;) plt.subplot(2,2,3) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;departure_delay_in_minutes&quot;, bins=3).set(title=&#39;dep_delay (mins)&#39;) plt.subplot(2,2,4) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;arrival_delay_in_minutes&quot;, bins=3).set(title=&#39;arriv_delay (mins)&#39;) plt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9, wspace=0.9, hspace=0.9) plt.show() . Age: Most customers are centered around the middle with very few being old . TODO What is the middle? Consider also using .describe to better quantify the distribution. Is the distribution normal? . Flight Distance: After 1000 there is a steep and continuing dropff. This may suggest the airline we are analysing focusses on short haul flights . TODO What are the units for the x axis? If distributions are not normal, like this one, you could consider a log transform to make them more normal. Models tend to perform better on normal distributions. . TODO For the delay variables, set the nr of bins higher so we can better see the distribution. . print(f&quot;Averga age is {df.customer_age.mean()}.&quot;) print(f&quot;Averga flight distance is {df.flight_distance.mean()}.&quot;) print(f&quot;Averga dept delay is {df.departure_delay_in_minutes.mean()} mins.&quot;) print(f&quot;Averga arrival delay is {df.arrival_delay_in_minutes.mean()} mins.&quot;) #TODO Use .describe to get a more complete overview. Comment on means and standard deviations, and on whether there are outliers. . Averga age is 39.42876118838185. Averga flight distance is 1190.2106620741852. Averga dept delay is 14.643385050236704 mins. Averga arrival delay is 15.09112883918849 mins. . print(df.departure_delay_in_minutes.max()) print(df.arrival_delay_in_minutes.max()) . 1592 1584 . unsure why the delay histograms are not showing correctly I&#39;ve tried seaborn and matplotlib. . TODO They are showing correctly, but you have set the nr of bins to 3, which means that all your data points are squashed in the first bin with the second and third bin containing only a handful of outliers. . In general all show most votes with an increase in rating. . wifi_rating &amp; booking_rating: Similar trend where very few ratings are at 0 . gate_rating: no ratings at 0 but follows a similar trend . time_rating: here there is an increasing percentage of ratings at a rating of 5 . plt.subplot(2,2,1) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;food/drink_satisfaction_rating&quot;, bins=5).set(title=&#39;food_rating&#39;) plt.subplot(2,2,2) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;online_boarding_satisfaction_rating&quot;, bins=5).set(title=&#39;boarding_rating&#39;) plt.subplot(2,2,3) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;seat_comfort_satisfaction_rating&quot;, bins=5).set(title=&#39;seat_rating&#39;) plt.subplot(2,2,4) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;inflight_entertainment_satisfaction_rating&quot;, bins=5).set(title=&#39;inflight_rating&#39;) plt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9, wspace=0.9, hspace=0.9) plt.show() . All plots show ~ no ratings of 0. A rating of 5 is by far the most common. . plt.subplot(2,2,1) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;onboard_service_satisfaction_rating&quot;, bins=5).set(title=&#39;onboard_rating&#39;) plt.subplot(2,2,2) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;leg_room_n_satisfaction_rating&quot;, bins=5).set(title=&#39;leg_rating&#39;) plt.subplot(2,2,3) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;baggage_handling_satisfaction_rating&quot;, bins=5).set(title=&#39;baggage_rating&#39;) plt.subplot(2,2,4) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;checkin_service_satisfaction_rating&quot;, bins=5).set(title=&#39;checkin_rating&#39;) plt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9, wspace=0.9, hspace=0.9) plt.show() . The baggage rating is a slight anomaly where 4 is the most common rating. . plt.subplot(1,2,1) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;inflight_service_satisfaction_rating&quot;, bins=5).set(title=&#39;inflight_rating&#39;) plt.subplot(1,2,2) sns.set(style=&quot;darkgrid&quot;) sns.histplot(data=df, x=&quot;cleanliness_satisfaction_rating&quot;, bins=5).set(title=&#39;clean_rating&#39;) plt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9, wspace=0.9, hspace=0.9) plt.show() . Sorted average rating columns . print(f&quot;Averaga inflight service satisfaction is {df.inflight_service_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga baggage handling satisfaction is {df.baggage_handling_satisfaction_rating .mean()}.&quot;) print(f&quot;Averaga comfort satisfaction satisfaction is {df.seat_comfort_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga onboard service satisfaction is {df.onboard_service_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga inflight entertainment satisfaction is {df.inflight_entertainment_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga leg room satisfaction is {df.leg_room_n_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga checkin service satisfaction is {df.checkin_service_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga cleanliness satisfaction is {df.cleanliness_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga online boarding satisfaction is {df.online_boarding_satisfaction_rating.mean()}.&quot;) print(f&quot;Averaga food/drink satisfaction is {df[&#39;food/drink_satisfaction_rating&#39;].mean()}.&quot;) print(f&quot;Averaga departure/arrival_time satisfaction is {df[&#39;departure/arrival_time_satisfaction_rating&#39;].mean()}.&quot;) print(f&quot;Averga gate location satisfaction is {df.gate_location_satisfaction_rating.mean()}.&quot;) print(f&quot;Averga online booking satisfaction is {df.online_booking_satisfaction_rating.mean()}.&quot;) print(f&quot;Averga wifi satisfaction is {df.flight_wifi_satisfaction_rating.mean()}.&quot;) . Averaga inflight service satisfaction is 3.6423733656660513. Averaga baggage handling satisfaction is 3.631885826376393. Averaga comfort satisfaction satisfaction is 3.4415887309150723. Averaga onboard service satisfaction is 3.3832044915705826. Averaga inflight entertainment satisfaction is 3.3580668329639267. Averaga leg room satisfaction is 3.3510777143651485. Averaga checkin service satisfaction is 3.3062392363712187. Averaga cleanliness satisfaction is 3.2862217828816793. Averaga online boarding satisfaction is 3.2527203503054363. Averaga food/drink satisfaction is 3.204684640156927. Averaga departure/arrival_time satisfaction is 3.057349386424892. Averga gate location satisfaction is 2.9769088788835947. Averga online booking satisfaction is 2.756786395545499. Averga wifi satisfaction is 2.728544178180049. . #TODO Because all the rating distributions are so similar, consider .describe to better compare them, or at least compare the means along with the standard deviations. . . df[&#39;satisfaction_target&#39;].value_counts(normalize=True).plot(kind=&#39;bar&#39;, color = (&#39;Blue&#39;, &#39;Orange&#39;)) plt.xlabel(&#39;Satisfied Target Variable&#39;) plt.ylabel(&#39;Count&#39;) plt.title(&#39;Count of Satisfaction Target&#39;) # TODO This is your most important variable, and you should spend plenty of time on it. Comment on the split, and on whether this means you will need to apply SMOTE later. . Text(0.5, 1.0, &#39;Count of Satisfaction Target&#39;) . a = df[&#39;satisfaction_target&#39;].value_counts(normalize=True) . a = pd.DataFrame(a) . a . satisfaction_target . neutral or dissatisfied 0.565501 | . satisfied 0.434499 | . Interestingly, there are fewer satisfied customers than satisfied ones. . . df[&#39;customer_gender&#39;].value_counts(normalize=True).plot(kind=&#39;bar&#39;, color = (&#39;Blue&#39;, &#39;Orange&#39;)) plt.xlabel(&#39;Gender Variable&#39;) plt.ylabel(&#39;Count&#39;) plt.title(&#39;Count of Each Gender&#39;) . Text(0.5, 1.0, &#39;Count of Each Gender&#39;) . a = df[&#39;customer_gender&#39;].value_counts(normalize=True) . a = pd.DataFrame(a) . a . customer_gender . Female 0.50741 | . Male 0.49259 | . The split between male and female passangers is roughly equal. . . df[&#39;customer_travel_type&#39;].value_counts(normalize=True).plot(kind=&#39;bar&#39;, color = (&#39;Blue&#39;, &#39;Orange&#39;)) plt.xlabel(&#39;Type of Travel&#39;) plt.ylabel(&#39;Count&#39;) plt.title(&#39;Count of Each Travel Type&#39;) . Text(0.5, 1.0, &#39;Count of Each Travel Type&#39;) . a = df[&#39;customer_travel_type&#39;].value_counts(normalize=True) . a = pd.DataFrame(a) . a . customer_travel_type . Business travel 0.690764 | . Personal Travel 0.309236 | . As expected, business travel is the reason for most of the travel. . TODO why is this expected? Will this have an impact on the satisfaction scores? . . df[&#39;customer_class_type&#39;].value_counts(normalize=True).plot(kind=&#39;bar&#39;, color = (&#39;Blue&#39;, &#39;Orange&#39;)) plt.xlabel(&#39;Class Typ&#39;) plt.ylabel(&#39;Count&#39;) plt.title(&#39;Count of Each Class Type&#39;) . Text(0.5, 1.0, &#39;Count of Each Class Type&#39;) . a = df[&#39;customer_class_type&#39;].value_counts(normalize=True) . a = pd.DataFrame(a) . a . customer_class_type . Business 0.478735 | . Eco 0.448825 | . Eco Plus 0.072440 | . Considering the majortiy of any plane is economy, it&#39;s very surprising to see business more popular than economy. The low number of eco plus flights may be due to a lack of eco plus class type availablity on all planes. . df.head() . id satisfaction_target customer_gender customer_loyalty_type customer_age customer_travel_type customer_class_type flight_distance flight_wifi_satisfaction_rating departure/arrival_time_satisfaction_rating ... seat_comfort_satisfaction_rating inflight_entertainment_satisfaction_rating onboard_service_satisfaction_rating leg_room_n_satisfaction_rating baggage_handling_satisfaction_rating checkin_service_satisfaction_rating inflight_service_satisfaction_rating cleanliness_satisfaction_rating departure_delay_in_minutes arrival_delay_in_minutes . 0 117135 | satisfied | Male | disloyal Customer | 56 | Personal Travel | Eco | 369 | 0 | 2 | ... | 3 | 3 | 1 | 5 | 3 | 3 | 4 | 3 | 0 | 0 | . 1 72091 | satisfied | Male | disloyal Customer | 49 | Personal Travel | Eco | 2486 | 0 | 2 | ... | 3 | 2 | 1 | 1 | 4 | 4 | 3 | 2 | 0 | 0 | . 2 29663 | satisfied | Male | disloyal Customer | 55 | Personal Travel | Eco | 1448 | 0 | 3 | ... | 3 | 3 | 3 | 5 | 3 | 2 | 3 | 3 | 0 | 0 | . 3 81849 | satisfied | Female | disloyal Customer | 36 | Personal Travel | Eco | 1501 | 0 | 4 | ... | 4 | 4 | 5 | 4 | 5 | 5 | 5 | 4 | 0 | 0 | . 4 83693 | satisfied | Male | disloyal Customer | 55 | Personal Travel | Eco | 577 | 0 | 5 | ... | 3 | 3 | 3 | 4 | 5 | 3 | 4 | 3 | 0 | 0 | . 5 rows × 24 columns . . . DataFrame Heatmap . Since we have not converted our categorical variables to binary columns, not all columns (including our targets variable) will show. . If any two columns have a strong correlation of 0.8+ we should look at potentially dropping it to avoid multicollinearity. . TODO Perhaps it is worth doing the categorical -&gt; numerical conversion here, so that we have a more complete overview in the heatmap below. . plt.figure(figsize = (30, 15)) sns.heatmap(df.corr().dropna(how = &#39;all&#39;).dropna(axis=1, how=&#39;all&#39;), vmin=-1, vmax = 1, annot = True) plt.show() . flight_wifi_satisfaction_rating has a 0.71 correlation with online_booking_satisfaction_rating. | cleanliness_satisfaction_rating has a 0.66 correlatin with food/drink_satisfaction_rating | cleanliness_satisfaction_rating has a 0.68 correlatin with seat_comfort_satisfaction_rating | cleanliness_satisfaction_rating has a 0.69 correlatin with inflight_service_satisfaction_rating | arrival_delay_in_minutes has a 0.97 correlation with departure_delay_in_minutes | . TODO What does it mean for two variables to be correlated? What impact does this have on models? What should we do about it? . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 129487 entries, 0 to 129486 Data columns (total 24 columns): # Column Non-Null Count Dtype -- -- 0 id 129487 non-null int64 1 satisfaction_target 129487 non-null object 2 customer_gender 129487 non-null object 3 customer_loyalty_type 129487 non-null object 4 customer_age 129487 non-null int64 5 customer_travel_type 129487 non-null object 6 customer_class_type 129487 non-null object 7 flight_distance 129487 non-null int64 8 flight_wifi_satisfaction_rating 129487 non-null int64 9 departure/arrival_time_satisfaction_rating 129487 non-null int64 10 online_booking_satisfaction_rating 129487 non-null int64 11 gate_location_satisfaction_rating 129487 non-null int64 12 food/drink_satisfaction_rating 129487 non-null int64 13 online_boarding_satisfaction_rating 129487 non-null int64 14 seat_comfort_satisfaction_rating 129487 non-null int64 15 inflight_entertainment_satisfaction_rating 129487 non-null int64 16 onboard_service_satisfaction_rating 129487 non-null int64 17 leg_room_n_satisfaction_rating 129487 non-null int64 18 baggage_handling_satisfaction_rating 129487 non-null int64 19 checkin_service_satisfaction_rating 129487 non-null int64 20 inflight_service_satisfaction_rating 129487 non-null int64 21 cleanliness_satisfaction_rating 129487 non-null int64 22 departure_delay_in_minutes 129487 non-null int64 23 arrival_delay_in_minutes 129487 non-null int64 dtypes: int64(19), object(5) memory usage: 23.7+ MB . .",
            "url": "https://ali-idris.github.io/festival2oscars/2022/08/03/EDA-Mark.html",
            "relUrl": "/2022/08/03/EDA-Mark.html",
            "date": " • Aug 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ali-idris.github.io/festival2oscars/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ali-idris.github.io/festival2oscars/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ali-idris.github.io/festival2oscars/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}